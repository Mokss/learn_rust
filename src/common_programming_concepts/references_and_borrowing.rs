// в расте так же есть указатели, но сделаны по хитрому
// нельзя иметь больше одного указателя с мутацией в одной области видимости
// но можно сколько угодно иметь указатель без мутации
// функции не могут возвращать указатели, из созданных структур внутри, это как раз ведет к утечкам
// а просто возвращают значения, это не значит что все копируется, просто меняется владелец, то есть такой же указаетль
// только не выглядит как указатель
// fn dangle() -> &String {
//    let s = String::from("hello");
//
//    return &s;
// }
// это дает возможность дальше работать без gc и очищать память в куче когда очищается стек, крч круто)

#[allow(dead_code)]
pub fn references_and_borrowing() {
    let mut s = String::from("hello");
    change(&mut s);

    // будет ошибка,нельзя иметь 2 мутирующих указателя
    // let r1 = &mut s;
    // let r2 = &mut s;
    // println!("{}, {}", r1, r2);

    // но если обернуть в скобки, то будет другая область видимости, новое значение в стеке и не будет ошибки
    //{
    //  let r1 = &mut s;
    //}

    // после того как мы используем указатели без мутации, и не будет исопльзовать дальше
    // можно юзать указатель с мутацией
    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{r1} and {r2}");
    let r3 = &mut s; // no problem
    println!("{r3}");


}


fn change(some_string: &mut String) {
    some_string.push_str(", world");
}