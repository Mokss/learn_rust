// в расте можно эффективно работать с память, и делать указатели
// на другие указатели, начиная и заканчивая с n индекса
// так можно со строками, массивами, векторами и чем то еще 

#[allow(dead_code)]
pub fn slite_type() {
    let s = String::from("hello world");

    let word = first_word(&s);

    // s.clear();  // error! (если бы mut s), так как мы должны гарантировать
    // что word так же будет ссылаться на не пустую область памяти

    println!("the first word is: {word}");
}

fn first_word(s: &String) -> &str {
    // если бы мы возвращали ссылку из строки, созданный в этой функции
    // то мы бы получили ошибку, потому что нарушили бы правило заимствования и времени жизни
    // что логично, так как мы возвращаем ссылку на память, которая сразу очищается, как только завершается функции
    // ибо очищается стек с областью видимости, мне очень нравится
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}